{"version":3,"sources":["Dashboard.js","Historical.js","App.js","App2.js","serviceWorker.js","index.js"],"names":["PureComponent","Dashboard","state","data","rp","res2","JSON","parse","filter","item","country","this","setState","console","log","timeline","Array","isArray","length","datum","key","cases","push","date","type","value","Number","deaths","recovered","height","width","scale","range","forceFit","name","label","formatter","val","index","autoRotate","crosshairs","position","size","color","shape","style","stroke","lineWidth","React","Component","App","Header","Layout","Content","Footer","Sider","App2","Menu","SubMenu","collapsed","onCollapse","minHeight","collapsible","className","margin","theme","defaultSelectedKeys","mode","Item","PieChartOutlined","DesktopOutlined","FileOutlined","title","padding","Historical","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5f6f4dc.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataTable, Text, Meter, Box, Accordion, AccordionPanel} from 'grommet';\nimport {Table} from 'antd';\n\nexport class Dashboard extends PureComponent {\n  render() {\n    const { tableData } = this.props;\n    console.log('dashboard prop: ', tableData);\n\n    return (\n      <Accordion>\n        <AccordionPanel label=\"Trend\">\n          <Box pad=\"medium\" background=\"light-2\">\n            <Text>Two</Text>\n          </Box>\n        </AccordionPanel>\n        <AccordionPanel label=\"Table\">\n          <Box pad={{horizontal: 'medium'}} height='medium' width='xlarge'>\n              <DataTable\n                columns={[\n                  {\n                    property: 'country',\n                    header: <Text>Country</Text>,\n                    primary: false,\n                    search: true,\n                  },\n                  {\n                    property: 'cases',\n                    header: <Text>Cases</Text>,\n                    primary: false,\n                    sortable: true\n                  },\n                  {\n                    property: 'todayCases',\n                    header: <Text>New Cases</Text>,\n                    primary: false,\n                    sortable: true\n                  },\n                  {\n                    property: 'deaths',\n                    header: <Text>Deaths</Text>,\n                    primary: false,\n                    sortable: true\n                  },\n                  {\n                    property: 'recovered',\n                    header: <Text>Recovered</Text>,\n                    primary: false,\n                    sortable: true\n                  },\n                  {\n                    property: 'percentage',\n                    header: 'Percentage increase',\n                    render: datum => (\n                      <Box pad={{ vertical: 'xsmall' }}>\n                        <Meter\n                          values={[{ value: datum.todayCases / datum.cases*100 }]}\n                          thickness='small'\n                          size='small'\n                          round={true}\n                        />\n                      </Box>\n                    ),\n                  },\n                  // {\n                  //   property: 'percent',\n                  //   header: 'Complete',\n                  //   render: datum => (\n                  //     <Box pad={{ vertical: 'xsmall' }}>\n                  //       <Meter\n                  //         values={[{ value: datum.percent }]}\n                  //         thickness=\"small\"\n                  //         size=\"small\"\n                  //       />\n                  //     </Box>\n                  //   ),\n                  // },\n                ]}\n                data={tableData}\n                background={{\n                  header: \"dark-3\",\n                  body: [\"light-1\", \"light-3\"],\n                  footer: \"dark-3\"\n                }}\n                step={1000}\n                sortable={true}\n                size='large'\n              />\n            </Box>\n        </AccordionPanel>\n      </Accordion>\n    )\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport rp from 'request-promise';\nimport {\n  G2,\n  Chart,\n  Geom,\n  Axis,\n  Tooltip,\n  Coord,\n  Label,\n  Legend,\n  View,\n  Guide,\n  Shape,\n  Facet,\n  Util\n} from \"bizcharts\";\n\nexport class Dashboard extends React.Component {\n\n  state = {\n    data: [],\n  }\n\n  async componentDidMount() {\n    let res2 = await rp('https://corona.lmao.ninja/historical');\n    res2 = await JSON.parse(res2);\n    res2 = res2.filter(item => item.country === 'india');\n    this.setState({ data: res2});\n  }\n\n  render() {\n    console.log('props in historical: ', this.state.data);\n    let timeline = {};\n    if (Array.isArray(this.state.data) && this.state.data.length > 0) {\n      timeline = this.state.data[0].timeline;\n    }\n    let datum = [];\n    console.log('timeline: ', timeline);\n    for (let key in timeline.cases) {\n      datum.push({\n        date: key,\n        type: 'cases',\n        value: Number(timeline.cases[key])\n      })\n    }\n    for (let key in timeline.deaths) {\n      datum.push({\n        date: key,\n        type: 'deaths',\n        value: Number(timeline.deaths[key])\n      })\n    }\n    for (let key in timeline.recovered) {\n      datum.push({\n        date: key,\n        type: 'recovered',\n        value: Number(timeline.recovered[key])\n      })\n    }\n    console.log('datum: ', datum)\n\n    const cols = {\n      date: {\n        range: [0, 1]\n      }\n    };\n    return (\n      <div>\n        <Chart height={800} width={1000} data={datum} scale={cols} forceFit>\n          <Legend />\n          <Axis name=\"date\" label={{\n            formatter: (val, key, index) => (index % 7 === 0) ? val : '',\n            autoRotate: false\n          }}/>\n          <Axis name=\"value\" />\n          <Tooltip\n            crosshairs={{\n              type: \"y\"\n            }}\n          />\n          <Geom\n            type=\"line\"\n            position=\"date*value\"\n            size={2}\n            color={\"type\"}\n            shape={\"smooth\"}\n          />\n          <Geom\n            type=\"point\"\n            position=\"date*value\"\n            size={4}\n            shape={\"circle\"}\n            color={\"type\"}\n            style={{\n              stroke: \"#fff\",\n              lineWidth: 1\n            }}\n          />\n        </Chart>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\nimport { Box, Button, Heading, Collapsible, Grommet, ResponsiveContext, Layer } from 'grommet';\nimport { Menu, CloudDownload } from 'grommet-icons';\nimport Dashboard from './Dashboard';\nimport Historical from './Historical';\nimport rp from 'request-promise';\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nasync function onClickGetData(callback1, callback2) {\n  let res = await rp('https://corona.lmao.ninja/countries');\n  res = await JSON.parse(res);\n  res.forEach(item => ({ ...item, percentageIncrease: item.todayCases*100/item.cases }))\n  callback1(res);\n  //console.log('clicked get data', res);\n\n  let res2 = await rp('https://corona.lmao.ninja/historical');\n  res2 = await JSON.parse(res2);\n  res2 = res2.filter(item => item.country === 'india');\n  callback2(res2);\n}\n\nconst AppBar = (props) => (\n  <Box\n    tag= 'header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={ { left: 'medium', right: 'small', vertical: 'small' } }\n    elevation='medium'\n    style={ { zIndex: '1' } }\n    { ...props }\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [historicalData, setHistoricalData] = useState([]);\n\n  console.log('table data: ', tableData);\n\n  return (\n    <Grommet theme= { theme } full >\n      <ResponsiveContext.Consumer>\n        {size => (\n          <Box fill >\n            <AppBar>\n              <Button\n                icon={<Menu />}\n                onClick={() => setShowSidebar(!showSidebar)}\n              />\n              <Heading level='3' margin='none'>Corona Tracker Dashboard</Heading>\n              <Button\n                icon={<CloudDownload />}\n                onClick={() => onClickGetData(setTableData, setHistoricalData)}\n              />\n            </AppBar>\n            <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n              {(!showSidebar || size !== 'small') ? (\n                <Collapsible direction=\"horizontal\" open={showSidebar}>\n                  <Box\n                    flex\n                    width='medium'\n                    background='light-2'\n                    elevation='small'\n                    align='center'\n                    justify='center'\n                  >\n                    sidebar\n                  </Box>\n                </Collapsible>\n              ) : (\n                <Layer>\n                  <Box fill background= 'light-2' align='center' justify='center'>\n                    sidebar\n                  </Box>\n                </Layer>\n              )}\n              <Box align='center' justify='strech' margin={{vertical: 'large'}}>\n                <Historical data={historicalData}/>\n                <Dashboard tableData={tableData}/>\n              </Box>\n            </Box >\n          </Box >\n        )}\n      </ResponsiveContext.Consumer>\n      </Grommet >\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, PageHeader } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nimport 'antd/dist/antd.css'; \nimport './index.css';\n\nimport Historical from './Historical';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nclass App2 extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" />\n          <div style={{margin: '74px'}} />\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\">\n              <PieChartOutlined />\n              <span>Dashboard</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <DesktopOutlined />\n              <span>Table</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <DesktopOutlined />\n              <span>Graph</span>\n            </Menu.Item>\n            <Menu.Item key=\"4\">\n              <DesktopOutlined />\n              <span>Other</span>\n            </Menu.Item>\n            <Menu.Item key=\"9\">\n              <FileOutlined />\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\">\n            <PageHeader title='Corona Tracker Dashboard' ></PageHeader>\n          </Header>\n          <Content style={{ margin: '0 16px' }}>\n            {/* <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\n            </Breadcrumb> */}\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360, margin: '16px 0' }}>\n              <Historical />\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App2 from './App2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}