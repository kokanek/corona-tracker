{"version":3,"sources":["Dashboard.js","Historical.js","App.js","App2.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","Dashboard","Sider","state","data","rp","res","JSON","parse","forEach","item","percentageIncrease","todayCases","cases","this","setState","tableData","console","log","className","title","subTitle","style","margin","padding","minHeight","DataTable","columns","property","header","Text","primary","search","sortable","render","datum","Box","pad","vertical","Meter","values","value","thickness","size","round","background","body","footer","step","textAlign","PureComponent","Option","Select","countries","selectedCountry","onChange","elem","val","map","country","key","province","displayValue","countryData","filter","timeline","Array","isArray","length","push","date","type","Number","deaths","recovered","display","flexDirection","justifyContent","alignItems","showSearch","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","height","scale","range","forceFit","name","label","formatter","index","autoRotate","crosshairs","position","color","shape","stroke","lineWidth","React","Component","App","App2","collapsed","onCollapse","collapsible","theme","defaultSelectedKeys","mode","Item","onClick","PieChartOutlined","DesktopOutlined","FileOutlined","Historical","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a93b3719.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataTable, Text, Meter, Box, Accordion, AccordionPanel} from 'grommet';\nimport { Layout, Menu, PageHeader, Select } from 'antd';\nimport rp from 'request-promise';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport class Dashboard extends PureComponent {\n\n  state = {\n    data: [],\n  }\n\n  async componentDidMount() {\n    let res = await rp('https://corona.lmao.ninja/countries');\n    res = await JSON.parse(res);\n    res.forEach(item => ({ ...item, percentageIncrease: item.todayCases * 100 / item.cases }))\n    this.setState({ data: res });\n  }\n\n  render() {\n    const { data: tableData } = this.state;\n    console.log('dashboard prop: ', tableData);\n\n    return (\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\">\n          <PageHeader title='Detailed tracker' subTitle='All data' ></PageHeader>\n        </Header>\n        <Content style={{ margin: '0 16px' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360, margin: '16px 0' }}>\n            <DataTable\n              columns={[\n                {\n                  property: 'country',\n                  header: <Text>Country</Text>,\n                  primary: false,\n                  search: true,\n                },\n                {\n                  property: 'cases',\n                  header: <Text>Cases</Text>,\n                  primary: false,\n                  sortable: true\n                },\n                {\n                  property: 'todayCases',\n                  header: <Text>New Cases today</Text>,\n                  primary: false,\n                  sortable: true\n                },\n                {\n                  property: 'deaths',\n                  header: <Text>Deaths</Text>,\n                  primary: false,\n                  sortable: true\n                },\n                {\n                  property: 'recovered',\n                  header: <Text>Recovered</Text>,\n                  primary: false,\n                  sortable: true\n                },\n                {\n                  property: 'percentage',\n                  header: 'Percentage increase',\n                  render: datum => (\n                    <Box pad={{ vertical: 'xsmall' }}>\n                      <Meter\n                        values={[{ value: datum.todayCases / datum.cases * 100 }]}\n                        thickness='small'\n                        size='small'\n                        round={true}\n                      />\n                    </Box>\n                  ),\n                },\n              ]}\n              data={tableData}\n              background={{\n                header: \"dark-3\",\n                body: [\"light-1\", \"light-3\"],\n                footer: \"dark-3\"\n              }}\n              step={1000}\n              sortable={true}\n              size='large'\n            />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n      </Layout>\n      \n    )\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport rp from 'request-promise';\nimport { Layout, Menu, PageHeader, Select } from 'antd';\nimport {\n  G2,\n  Chart,\n  Geom,\n  Axis,\n  Tooltip,\n  Coord,\n  Label,\n  Legend,\n  View,\n  Guide,\n  Shape,\n  Facet,\n  Util\n} from \"bizcharts\";\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst { Option } = Select;\n\nexport class Dashboard extends React.Component {\n\n  state = {\n    data: [],\n    countries: [],\n    selectedCountry: 'india'\n  }\n\n  async componentDidMount() {\n    let res = await rp('https://corona.lmao.ninja/historical');\n    res = await JSON.parse(res);\n    const countries = res.map(item => ({ country: item.country, key: `${item.country}${item.province? `${item.province}` : ''}`, displayValue: `${item.country}${item.province ?` (${item.province})` : ''}` }));\n    this.setState({ data: res, countries: countries});\n  }\n\n  onChange = (elem, val) => {\n    console.log('checked: ', elem, val);\n    this.setState({ selectedCountry: elem})\n  }\n\n  render() {\n    const countryData = this.state.data.filter(item => {\n      const countryKey = `${item.country}${item.province||''}` \n      return countryKey == this.state.selectedCountry\n    });\n    console.log('props countries: ', this.state.countries);\n    let timeline = {};\n    if (Array.isArray(countryData) && countryData.length > 0) {\n      timeline = countryData[0].timeline;\n    }\n    let datum = [];\n    console.log('timeline: ', timeline);\n    for (let key in timeline.cases) {\n      datum.push({\n        date: key,\n        type: 'cases',\n        value: Number(timeline.cases[key])\n      })\n    }\n    for (let key in timeline.deaths) {\n      datum.push({\n        date: key,\n        type: 'deaths',\n        value: Number(timeline.deaths[key])\n      })\n    }\n    for (let key in timeline.recovered) {\n      datum.push({\n        date: key,\n        type: 'recovered',\n        value: Number(timeline.recovered[key])\n      })\n    }\n    console.log('datum: ', datum)\n\n    const cols = {\n      date: {\n        range: [0, 1]\n      }\n    };\n    return (\n      <Layout className=\"site-layout\">\n        <div className=\"site-layout-background\" style={{display: 'flex', flexDirection:'row', justifyContent: 'flex-start', alignItems: 'center'}}>\n          <PageHeader title='Corona Tracker Dashboard' subTitle='Trend by country' ></PageHeader>\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a country\"\n            optionFilterProp=\"children\"\n            value={this.state.selectedCountry}\n            onChange={this.onChange}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {this.state.countries.map(country => <Option value={`${country.key}`} key={`${country.key}`}>{`${country.displayValue}`}</Option>)}\n          </Select>\n        </div>\n        <Content style={{ margin: '0 16px' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360, margin: '16px 0' }}>\n            <Chart height={800} width={1000} data={datum} scale={cols} forceFit>\n              <Legend />\n              <Axis name=\"date\" label={{\n                formatter: (val, key, index) => (index % 7 === 0) ? val : '',\n                autoRotate: false\n              }} />\n              <Axis name=\"value\" />\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n              <Geom\n                type=\"line\"\n                position=\"date*value\"\n                size={2}\n                color={[\"type\", ['#40a9ff', '#ff4d4f', '#73d13d']]}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"date*value\"\n                size={4}\n                shape={\"circle\"}\n                color={[\"type\", ['#40a9ff', '#ff4d4f', '#73d13d']]}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\nimport { Box, Button, Heading, Collapsible, Grommet, ResponsiveContext, Layer } from 'grommet';\nimport { Menu, CloudDownload } from 'grommet-icons';\nimport Dashboard from './Dashboard';\nimport Historical from './Historical';\nimport rp from 'request-promise';\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nasync function onClickGetData(callback1, callback2) {\n  let res = await rp('https://corona.lmao.ninja/countries');\n  res = await JSON.parse(res);\n  res.forEach(item => ({ ...item, percentageIncrease: item.todayCases*100/item.cases }))\n  callback1(res);\n  //console.log('clicked get data', res);\n\n  let res2 = await rp('https://corona.lmao.ninja/historical');\n  res2 = await JSON.parse(res2);\n  res2 = res2.filter(item => item.country === 'india');\n  callback2(res2);\n}\n\nconst AppBar = (props) => (\n  <Box\n    tag= 'header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={ { left: 'medium', right: 'small', vertical: 'small' } }\n    elevation='medium'\n    style={ { zIndex: '1' } }\n    { ...props }\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [historicalData, setHistoricalData] = useState([]);\n\n  console.log('table data: ', tableData);\n\n  return (\n    <Grommet theme= { theme } full >\n      <ResponsiveContext.Consumer>\n        {size => (\n          <Box fill >\n            <AppBar>\n              <Button\n                icon={<Menu />}\n                onClick={() => setShowSidebar(!showSidebar)}\n              />\n              <Heading level='3' margin='none'>Corona Tracker Dashboard</Heading>\n              <Button\n                icon={<CloudDownload />}\n                onClick={() => onClickGetData(setTableData, setHistoricalData)}\n              />\n            </AppBar>\n            <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n              {(!showSidebar || size !== 'small') ? (\n                <Collapsible direction=\"horizontal\" open={showSidebar}>\n                  <Box\n                    flex\n                    width='medium'\n                    background='light-2'\n                    elevation='small'\n                    align='center'\n                    justify='center'\n                  >\n                    sidebar\n                  </Box>\n                </Collapsible>\n              ) : (\n                <Layer>\n                  <Box fill background= 'light-2' align='center' justify='center'>\n                    sidebar\n                  </Box>\n                </Layer>\n              )}\n              <Box align='center' justify='strech' margin={{vertical: 'large'}}>\n                <Historical data={historicalData}/>\n                <Dashboard tableData={tableData}/>\n              </Box>\n            </Box >\n          </Box >\n        )}\n      </ResponsiveContext.Consumer>\n      </Grommet >\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, PageHeader, Select } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nimport 'antd/dist/antd.css'; \nimport './index.css';\n\nimport Historical from './Historical';\nimport Dashboard from './Dashboard';\n\nconst { Sider } = Layout;\n\nclass App2 extends React.Component {\n  state = {\n    collapsed: false,\n    display: 'graph'\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  onChange = elem => {\n    console.log('on change triggered: ', elem);\n  }\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" />\n          <div style={{margin: '12px'}} />\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\" onClick={() => this.setState({display: 'graph'})}>\n              <PieChartOutlined />\n              <span>Dashboard</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\" onClick={() => this.setState({ display: 'table' })}>\n              <DesktopOutlined />\n              <span>Table</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <DesktopOutlined />\n              <span>Graph</span>\n            </Menu.Item>\n            <Menu.Item key=\"4\">\n              <DesktopOutlined />\n              <span>Other</span>\n            </Menu.Item>\n            <Menu.Item key=\"9\">\n              <FileOutlined />\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        {this.state.display === 'graph' && <Historical />}\n        {this.state.display === 'table' && <Dashboard />}\n      </Layout>\n    );\n  }\n}\n\nexport default App2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App2 from './App2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}